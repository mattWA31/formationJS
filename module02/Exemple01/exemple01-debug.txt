Pour commencer, revenons à notre jeu de devinettes numériques sauf que cette fois-ci, nous explorerons une version qui comporte des erreurs délibérées.

1. Pour commencer, ouvrez la copie locale avec votre éditeur de texte favoris.
2. Essayez de lancer le jeu. Vous remarquerez que quand vous pressez le bouton "Submit guess", cela ne fonctionne pas!

Ce qui est encore plus utile, c'est que la console vous donne des messages d'erreur chaque fois qu'une erreur de syntaxe existe dans le JavaScript qui est introduit dans le moteur JavaScript du navigateur. Maintenant allons chasser.

1. Allez à l'onglet dans lequel est affiché number-game-errors.html, et ouvrez la console  JavaScript. Vous devriez voir un message d'erreur dans les lignes qui suivent?: 
	TypeError: boutonEnvoyer.addeventListener is not a function


2. C'est une erreur très facile à trouver, et le navigateur vous fournit quelques indices pour vous en sortir. De gauche à droite, nous avons :

    Une croix rouge indiquant que c'est une erreur.
    Un message d'erreur précisant ce qui ne va pas : "TypeError: boutonEnvoyer.addeventListener is not a function" ("Type d'erreur: boutonEnvoyer.addeventListener n'est pas une fonction")
    Le nom du fichier JavaScript, lié à l'onglet Debugger de l'outil de développement. Si vous suivez le lien, vous verrez exactement la ligne dans laquelle l'erreur est mise en évidence.
    Le numéro de la ligne où se situe l'erreur. Dans notre cas, il s'agit de la ligne 95.


3. En examinant la ligne 95 dans l'éditeur de code

4. Le message d'erreur dit "boutonEnvoyer.addeventListener n'est pas une fonction", donc nous avons probablement mal orthographié quelque chose. Si vous n'êtes pas sûr de la bonne orthographe d'un élément syntaxique,  faire une recherche pour  "js nom-de-fonctionnalité" avec votre moteur préféré.

5. Donc, en regardant cette page, il apparaît que nous avions mal orthographié le nom de la fonction ! Remplacer addeventListener par addEventListener corrigera cela. Faisons le maintenant.


Erreurs de syntaxe: deuxième tour
---------------------------------
1. Enregistrez la page et actualisez la, vous constaterez que l'erreur a disparu.
2. Maintenant si vous entrez une supposition et pressez le bouton de soumission, vous constaterez ... une autre erreur!
		Uncaught TypeError: Cannot set property 'textContent' of null at HTMLInputElement.verifierProposition
3. Regardez à la ligne 86, vous verrez ce code:
		grandOuPetit.textContent = 'Le nombre saisi est trop grand !';
4. La commande dans cette ligne essaie de définir la propriété textContent de la variable grandOuPetit à l'aide d'une chaîne textuelle ; mais cela ne fonctionne pas car grandOuPetit ne contient pas ce qui est attendu. 
5. Voyons voir — recherchons d'autres occurrences de grandOuPetit dans le code. La plus proche que vous trouverez dans le JavaScript se situe à la ligne 48:
		var grandOuPetit = document.querySelector('grandOuPetit');
		
6. Là, nous essayons de faire en sorte que la variable contienne une référence à un élément dans le HTML du document. Vérifions si sa valeur est null après que cette ligne ait été exécutée. Ajoutez le code suivant à la ligne 49:
		console.log(grandOuPetit);
		
Note: console.log() est vraiment utile pour déboguer une fonction en affichant sa valeur sur la console. Donc, elle affichera sur cette dernière la valeur de grandOuPetit que nous avons essayé de définir à la ligne 48

7. Enregistrez et actualisez la page, et vous verrez le résultat de console.log() sur la console.
C'est sûr, la valeur de grandOuPetit est null à ce niveau; il y a bien un problème à la ligne 48.

8. Lequel peut-il bien être? Réfléchissons. À la ligne 48, nous avons utilisé la méthode document.querySelector() pour obtenir une référence sur un élément avec un sélecteur CSS. En regardant plus en amont dans notre fichier, nous pouvons trouver le paragraphe en question:
	<p class="grandOuPetit"></p>

9. Donc, il nous faut un sélecteur de classe ici, précédé d'un point (.), alors que le sélecteur passé à la méthode querySelector() en ligne 48 n'en a pas. Ce pourrait être le problème! Changeons grandOuPetit en .grandOuPetit à la ligne 48.

10. Enregistrons et actualisons à nouveau, et la directive console.log() renvoie bien l'élément  <p> attendu. On peut enlever la ligne console.log() maintenant, ou bien la garder pour s'y reporter plus tard — comme vous l'entendez.

Erreurs de syntaxe: troisième tour
----------------------------------
1. Maintenant si vous essayez de jouer, cela ira mieux — tout se déroule correctement, jusqu'à ce que vous arriviez à la fin, soit en devinant le bon chiffre, soit en épuisant le nombre de tentatives permises.
2. Arrivé là, le jeu échoue à nouveau et vous rencontrez la même erreur qu'au début — "TypeError: boutonDeReset.addeventListener is not a function"! Mais cette fois-ci, elle vient de la ligne 62.
3. En regardant cette ligne, il est facile de voir que nous avons fait ici la même erreur que précédemment. Il nous suffit de changer addeventListener en addEventListener. Faites-le.


Une erreur de logique
---------------------
À ce stade, le jeu se déroule correctement, mais après avoir fait quelques parties, vous noterez sans doute que le nombre «aléatoire» à deviner est toujours 0 ou 1. Franchement, de quoi vous dégoûter de jouer!

Il y a sûrement un problème dans la logique du jeu quelque part — le jeu ne renvoie pas d'erreur; mais il ne fonctionne pas correctement.
1. Recherchons les lignes où la variable nombreAleatoire est définie. L'instance qui stocke en début de jeu le nombre aléatoire à deviner se situe autour de la ligne 44:
	var nombreAleatoire = Math.floor(Math.random()) + 1;

Et celle qui génére le nombre aléatoire pour une succession de jeux se situe autour de la ligne 113:
	nombreAleatoire = Math.floor(Math.random()) + 1;
	
Pour vérifier si ces lignes sont vraiment à l'origine du problème, faisons appel à nouveau à notre ami console.log() — insérons la ligne suivante directement en dessous des deux lignes indiquées plus haut:
	console.log(nombreAleatoire);

Enregistrons, actualisons et jouons quelques parties — on constate que nombreAleatoire est égal à 1 quel que soit le point où il est raccordé à la console.

Travaillons la logique
----------------------
Pour corriger cela, examinons d'abord le fonctionnement de cette ligne. Premièrement, appelons Math.random(), qui génére un nombre décimal aléatoire compris entre 0 et 1, par exemple 0.5675493843.
Puis, nous passons le résultat de l'appel de Math.random() à Math.floor(), qui arrondit le nombre passé à l'entier inférieur le plus proche. Puis, on ajoute 1 au résultat:
	Math.floor(Math.random()) + 1;

Garder la partie entière d'un nombre décimal compris entre 0 et 1 renvoie toujours 0, y ajouter 1 donne toujours  1. Il faut multiplier le nombre aléatoire par 100 avant de l'arrondir par défaut. La ligne suivante nous donne un entier aléatoire entre 0 et  99:
	Math.floor(Math.random()*100);

Maintenant ajoutons 1 pour obtenir un nombre aléatoire entre 1 et 100:
	Math.floor(Math.random()*100) + 1;
	
Modifiez ces deux lignes comme indiqué, enregistrez, actualisez — le jeu devrait maintenant fonctionner comme il faut!

